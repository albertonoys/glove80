#include <behaviors.dtsi>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/rgb_colors.h>

#define LAYER_Base 0
#define LAYER_Lower 1
#define LAYER_Magic 2
#define LAYER_Gaming 3

/ {
    underglow-layer {
        compatible = "zmk,underglow-layer";

        lower {
            bindings = <
                ______ ______ ______ ______ ______                                                         0x8A2BE2 0xa966e8 0xcba8ec ______ ______
                ______ ______ ______ ______ ______ ______                                           ______ GOLD     ORANGE   ORANGE   ORANGE ______
                ______ ______ ______ RED    ______ ______                                           ______ YELLOW   YELLOW   YELLOW   ORANGE ______
                ______ ______ RED    RED    RED    ______                                           ______ YELLOW   YELLOW   YELLOW   ORANGE ______
                ______ ______ ______ ______ ______ ______ ______ ______ ______ ______ ______ ______ ______ YELLOW   YELLOW   YELLOW   RED    ______
                ______ ______ ______ ______ ______        ______ ______ GREEN  ______ ______ ______        YELLOW   YELLOW   YELLOW   RED    ______
            >;
            layer-id = <LAYER_Lower>;
        };
        gaming {
            bindings = <
                ______ ______ ______ ______ ______                                                         ______ ______ ______ ______ ______
                ______ ______ ______ ______ ______ ______                                           ______ ______ ______ ______ ______ ______
                ______ ______ ______ PINK   ______ ______                                           ______ ______ ______ ______ ______ ______
                ______ GREEN  PINK   PINK   PINK   ______                                           ______ ______ ______ ______ ______ ______
                ______ ______ ______ ______ ______ ______ ______ ______ RED    ______ ______ ______ ______ ______ ______ ______ ______ ______
                ______ ______ ______ ______ ______        ______ ______ ______ ______ ______ ______        ______ ______ ______ ______ ______
            >;
            layer-id = <LAYER_Gaming>;
        };
    };
};

/ {
    keymap {
        compatible = "zmk,keymap";

        layer_Base {
            bindings = <
                &kp F1                 &kp F2        &kp F3         &kp F4         &kp F5                                                                                                           &kp F6        &kp F7         &kp F8         &kp F9           &kp F10
                &kp EQUAL              &kp N1        &kp N2         &kp N3         &kp N4        &kp N5                                                                                    &kp N6   &kp N7        &kp N8         &kp N9         &kp N0           &kp MINUS
                &kp TAB                &kp Q         &kp W          &kp E          &kp R         &kp T                                                                                     &kp Y    &kp U         &kp I          &kp O          &kp P            &kp BSLH
                &kp ESC                &hml LALT A   &hml LSHFT S   &hml LCTRL D   &hml LGUI F   &kp G                                                                                     &kp H    &hmr RGUI J   &hmr RCTRL K   &hmr RSHFT L   &hmr RALT SEMI   &kp SQT
                &kp GRAVE              &kp Z         &kp X          &kp C          &kp V         &kp B    &kp LSHFT   &kp LCTRL   &trans     &kp RALT   &kp RSHFT   &kp RCTRL              &kp N    &kp M         &kp COMMA      &kp DOT        &kp FSLH         &kp PG_UP
                &magic LAYER_Magic 0   &tog 3        &kp END        &kp LEFT       &kp RIGHT              &kp SPACE   &kp LGUI    &kp LALT   &kp RGUI   &kp RET     &lt LAYER_Lower BSPC            &kp UP        &kp DOWN       &kp LBKT       &kp RBKT         &kp PG_DN
            >;
        };
        layer_Lower {
            bindings = <
                &kp C_BRI_DN           &kp C_BRI_UP   &kp C_PREV   &kp C_NEXT   &kp C_PP                                                                                      &kp C_MUTE       &kp C_VOL_DN   &kp C_VOL_UP      &none             &kp PAUSE_BREAK
                &kp F11                &kp DEL        &none        &none        &none      &kp HOME                                                          &trans           &trans           &trans         &trans            &kp KP_MULTIPLY   &kp PRINTSCREEN
                &trans                 &kp N1         &kp N2       &kp N3       &kp N4     &kp N5                                                            &kp N6           &kp N7           &kp N8         &kp N9            &kp N0            &kp SCROLLLOCK
                &trans                 &none          &trans       &trans       &trans     &kp PG_UP                                                         &kp LEFT_ARROW   &kp DOWN_ARROW   &kp UP_ARROW   &kp RIGHT_ARROW   &kp KP_PLUS       &none
                &trans                 &kp K_APP      &kp BSPC     &kp F11      &kp F12    &kp PG_DN   &trans   &trans   &to 0    &trans   &trans   &trans   &kp COMMA        &trans           &kp LPAR       &kp RPAR          &kp KP_MINUS      &trans
                &magic LAYER_Magic 0   &kp CAPS       &kp INS      &kp F11      &kp F12                &trans   &trans   &trans   &trans   &trans   &trans                    &trans           &kp LBKT       &kp RBKT          &kp KP_ENTER      &trans
            >;
        };
        layer_Magic {
            bindings = <
                &bt BT_CLR    &none             &none             &none             &none                                                                                              &none   &none   &none   &none   &bt BT_CLR_ALL
                &none         &none             &none             &none             &none             &none                                                                    &none   &none   &none   &none   &none   &none
                &none         &rgb_ug RGB_SPI   &rgb_ug RGB_SAI   &rgb_ug RGB_HUI   &rgb_ug RGB_BRI   &rgb_ug RGB_TOG                                                          &none   &none   &none   &none   &none   &none
                &bootloader   &rgb_ug RGB_SPD   &rgb_ug RGB_SAD   &rgb_ug RGB_HUD   &rgb_ug RGB_BRD   &rgb_ug RGB_EFF                                                          &none   &none   &none   &none   &none   &bootloader
                &sys_reset    &none             &none             &none             &none             &none             &bt_2   &bt_3   &none          &none   &none   &none   &none   &none   &none   &none   &none   &sys_reset
                &none         &none             &none             &none             &none                               &bt_0   &bt_1   &out OUT_USB   &none   &none   &none           &none   &none   &none   &none   &to 2
            >;
        };
        layer_Gaming {
            bindings = <
                &kp F1      &kp F2      &kp F3    &kp F4     &kp F5                                                                                             &kp F6   &kp F7      &kp F8     &kp F9     &kp F10
                &kp EQUAL   &kp N1      &kp N2    &kp N3     &kp N4      &kp N5                                                                        &kp N6   &kp N7   &kp N8      &kp N9     &kp N0     &kp MINUS
                &kp TAB     &trans      &kp Q     &kp W      &kp E       &kp R                                                                         &kp T    &kp Y    &kp U       &kp I      &kp O      &kp P
                &kp ESC     &kp LSHFT   &kp A     &kp S      &kp D       &kp F                                                                         &kp G    &kp H    &kp J       &kp K      &kp L      &kp SEMI
                &kp GRAVE   &kp Z       &kp X     &kp C      &kp V       &kp B    &kp LSHFT   &kp LGUI    &tog 3    &kp RALT   &kp RCTRL   &kp RSHFT   &kp N    &kp M    &kp COMMA   &kp DOT    &kp FSLH   &kp PG_UP
                &trans      &kp HOME    &kp END   &kp LEFT   &kp RIGHT            &kp SPACE   &kp LCTRL   &kp RET   &kp RGUI   &kp RET     &kp BSPC             &kp UP   &kp DOWN    &kp LBKT   &kp RBKT   &kp PG_DN
            >;
        };
    };
};

// key definitions
// https://github.com/urob/zmk-helpers/blob/main/include/zmk-helpers/key-labels/glove80.h
// Groups
#define KEYS_L LC1 LC2 LC3 LC4 LC5 LN0 LN1 LN2 LN3 LN4 LN5 LT0 LT1 LT2 LT3 LT4 LT5 LM0 LM1 LM2 LM3 LM4 LM5 LB0 LB1 LB2 LB3 LB4 LB5 LF1 LF2 LF3 LF4 LF5
#define KEYS_R RC1 RC2 RC3 RC4 RC5 RN0 RN1 RN2 RN3 RN4 RN5 RT0 RT1 RT2 RT3 RT4 RT5 RM0 RM1 RM2 RM3 RM4 RM5 RB0 RB1 RB2 RB3 RB4 RB5 RF1 RF2 RF3 RF4 RF5
#define THUMBS LH0 LH1 LH2 LH3 LH4 LH5 RH0 RH1 RH2 RH3 RH4 RH5

// left-ceiling row
#define LC1 4
#define LC2 3
#define LC3 2
#define LC4 1
#define LC5 0

// right-ceiling row
#define RC1 5
#define RC2 6
#define RC3 7
#define RC4 8
#define RC5 9

// left-number row
#define LN0 15
#define LN1 14
#define LN2 13
#define LN3 12
#define LN4 11
#define LN5 10

// right-number row
#define RN0 16
#define RN1 17
#define RN2 18
#define RN3 19
#define RN4 20
#define RN5 21

// left-top row
#define LT0 27
#define LT1 26
#define LT2 25
#define LT3 24
#define LT4 23
#define LT5 22

// right-top row
#define RT0 28
#define RT1 29
#define RT2 30
#define RT3 31
#define RT4 32
#define RT5 33

// left-middle row
#define LM0 39
#define LM1 38
#define LM2 37
#define LM3 36
#define LM4 35
#define LM5 34

// right-middle row
#define RM0 40
#define RM1 41
#define RM2 42
#define RM3 43
#define RM4 44
#define RM5 45

// left-bottom row
#define LB0 51
#define LB1 50
#define LB2 49
#define LB3 48
#define LB4 47
#define LB5 46

// right-bottom row
#define RB0 58
#define RB1 59
#define RB2 60
#define RB3 61
#define RB4 62
#define RB5 63

// left-floor row
#define LF1 68
#define LF2 67
#define LF3 66
#define LF4 65
#define LF5 64

// right-floor row
#define RF1 75
#define RF2 76
#define RF3 77
#define RF4 78
#define RF5 79

// left thumb keys
#define LH0 71
#define LH1 70
#define LH2 69
#define LH3 54
#define LH4 53
#define LH5 52

// right thumb keys
#define RH0 72
#define RH1 73
#define RH2 74
#define RH3 55
#define RH4 56
#define RH5 57

// home row mods
/ {
    behaviors {
        hml: home_row_mod_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <160>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_R THUMBS>;
            hold-trigger-on-release;
        };
        hmr: home_row_mod_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <160>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_L THUMBS>;
            hold-trigger-on-release;
        };
    };
};

// misc
/ {
    behaviors {
        lower: lower {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo LAYER_Lower>, <&to LAYER_Lower>;
        };
    };
};

/ {
    macros {
        rgb_ug_status_macro: rgb_ug_status_macro {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&rgb_ug RGB_STATUS>;
        };
    };
};

/ {
    behaviors {
        magic: magic {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };
    };
};

// Bluetooth behaviors
/ {
    behaviors {
        bt_0: bt_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_0";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_0>, <&bt BT_DISC 0>;
        };
        bt_1: bt_1 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_1";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_1>, <&bt BT_DISC 1>;
        };
        bt_2: bt_2 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_2";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_2>, <&bt BT_DISC 2>;
        };
        bt_3: bt_3 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_3";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_3>, <&bt BT_DISC 3>;
        };
    };
    macros {
        bt_select_0: bt_select_0 {
            label = "BT_SELECT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE>, <&bt BT_SEL 0>;
        };
        bt_select_1: bt_select_1 {
            label = "BT_SELECT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE>, <&bt BT_SEL 1>;
        };
        bt_select_2: bt_select_2 {
            label = "BT_SELECT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE>, <&bt BT_SEL 2>;
        };
        bt_select_3: bt_select_3 {
            label = "BT_SELECT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE>, <&bt BT_SEL 3>;
        };
    };
};
